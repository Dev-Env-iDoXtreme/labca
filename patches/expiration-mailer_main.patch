diff --git a/cmd/expiration-mailer/main.go b/cmd/expiration-mailer/main.go
index eed765273..e17bfde1c 100644
--- a/cmd/expiration-mailer/main.go
+++ b/cmd/expiration-mailer/main.go
@@ -23,6 +23,7 @@ import (
 
 	"github.com/prometheus/client_golang/prometheus"
 
+	"github.com/letsencrypt/boulder/bdns"
 	"github.com/letsencrypt/boulder/cmd"
 	"github.com/letsencrypt/boulder/config"
 	"github.com/letsencrypt/boulder/core"
@@ -39,7 +40,7 @@ import (
 )
 
 const (
-	defaultExpirationSubject = "Let's Encrypt certificate expiration notice for domain {{.ExpirationSubject}}"
+	defaultExpirationSubject = "LabCA certificate expiration notice for domain {{.ExpirationSubject}}"
 )
 
 var (
@@ -161,8 +162,12 @@ func (m *mailer) sendNags(conn bmail.Conn, contacts []string, certs []*x509.Cert
 		if parsed.Scheme != "mailto" {
 			continue
 		}
+		pa, err := policy.New(nil, nil)
+		if err != nil {
+			return fmt.Errorf("cannot create policy authority implementation")
+		}
 		address := parsed.Opaque
-		err = policy.ValidEmail(address)
+		err = pa.ValidEmail(address)
 		if err != nil {
 			m.log.Debugf("skipping invalid email: %s", err)
 			continue
@@ -697,6 +702,11 @@ type Config struct {
 		TLS       cmd.TLSConfig
 		SAService *cmd.GRPCClientConfig
 
+		DNSTries                  int
+		DNSStaticResolvers        []string
+		DNSTimeout                string
+		DNSAllowLoopbackAddresses bool
+
 		// Path to a file containing a list of trusted root certificates for use
 		// during the SMTP connection (as opposed to the gRPC connections).
 		SMTPTrustedRootFile string
@@ -850,8 +860,35 @@ func main() {
 	cmd.FailOnError(err, "Failed to load credentials and create gRPC connection to SA")
 	sac := sapb.NewStorageAuthorityClient(conn)
 
+	dnsTimeout, err := time.ParseDuration(c.Mailer.DNSTimeout)
+	cmd.FailOnError(err, "Couldn't parse DNS timeout")
+	dnsTries := c.Mailer.DNSTries
+	if dnsTries < 1 {
+		dnsTries = 1
+	}
+	var resolver bdns.Client
+	servers, err := bdns.NewStaticProvider(c.Mailer.DNSStaticResolvers)
+	cmd.FailOnError(err, "Couldn't start static DNS server resolver")
+	if !c.Mailer.DNSAllowLoopbackAddresses {
+		r := bdns.New(
+			dnsTimeout,
+			servers,
+			scope,
+			clk,
+			dnsTries,
+			logger,
+			tlsConfig)
+		resolver = r
+	} else {
+		r := bdns.NewTest(dnsTimeout, servers, scope, clk, dnsTries, logger, tlsConfig)
+		resolver = r
+	}
+
 	var smtpRoots *x509.CertPool
-	if c.Mailer.SMTPTrustedRootFile != "" {
+	smtpSkipVerify := false
+	if c.Mailer.SMTPTrustedRootFile == "InsecureSkipVerify" {
+		smtpSkipVerify = true
+	} else if c.Mailer.SMTPTrustedRootFile != "" {
 		pem, err := os.ReadFile(c.Mailer.SMTPTrustedRootFile)
 		cmd.FailOnError(err, "Loading trusted roots file")
 		smtpRoots = x509.NewCertPool()
@@ -885,6 +922,8 @@ func main() {
 		c.Mailer.Username,
 		smtpPassword,
 		smtpRoots,
+		smtpSkipVerify,
+		resolver,
 		*fromAddress,
 		logger,
 		scope,
