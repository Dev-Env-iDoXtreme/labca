diff --git a/cmd/cert-checker/main.go b/cmd/cert-checker/main.go
index 340c5629..0dc0389a 100644
--- a/cmd/cert-checker/main.go
+++ b/cmd/cert-checker/main.go
@@ -100,6 +100,7 @@ type certChecker struct {
 	checkPeriod                 time.Duration
 	acceptableValidityDurations map[time.Duration]bool
 	logger                      blog.Logger
+	skipForbiddenDomains        bool
 }
 
 func newChecker(saDbMap certDB,
@@ -109,6 +110,7 @@ func newChecker(saDbMap certDB,
 	period time.Duration,
 	avd map[time.Duration]bool,
 	logger blog.Logger,
+	sfd bool,
 ) certChecker {
 	return certChecker{
 		pa:                          pa,
@@ -121,6 +123,7 @@ func newChecker(saDbMap certDB,
 		checkPeriod:                 period,
 		acceptableValidityDurations: avd,
 		logger:                      logger,
+		skipForbiddenDomains:        sfd,
 	}
 }
 
@@ -347,7 +350,7 @@ func (c *certChecker) checkCert(cert core.Certificate, ignoredLints map[string]b
 			err = c.pa.WillingToIssueWildcards([]identifier.ACMEIdentifier{id})
 			if err != nil {
 				problems = append(problems, fmt.Sprintf("Policy Authority isn't willing to issue for '%s': %s", name, err))
-			} else {
+			} else if !c.skipForbiddenDomains {
 				// For defense-in-depth, even if the PA was willing to issue for a name
 				// we double check it against a list of forbidden domains. This way even
 				// if the hostnamePolicyFile malfunctions we will flag the forbidden
@@ -409,11 +412,12 @@ type Config struct {
 		DB cmd.DBConfig
 		cmd.HostnamePolicyConfig
 
-		Workers             int
-		ReportDirectoryPath string
-		UnexpiredOnly       bool
-		BadResultsOnly      bool
-		CheckPeriod         cmd.ConfigDuration
+		Workers              int
+		ReportDirectoryPath  string
+		UnexpiredOnly        bool
+		BadResultsOnly       bool
+		SkipForbiddenDomains bool
+		CheckPeriod          cmd.ConfigDuration
 
 		// AcceptableValidityDurations is a list of durations which are
 		// acceptable for certificates we issue.
@@ -479,6 +483,8 @@ func main() {
 		acceptableValidityDurations[ninetyDays] = true
 	}
 
+	skipForbiddenDomains := config.CertChecker.SkipForbiddenDomains
+
 	// Validate PA config and set defaults if needed.
 	cmd.FailOnError(config.PA.CheckChallenges(), "Invalid PA configuration")
 
@@ -519,6 +525,7 @@ func main() {
 		config.CertChecker.CheckPeriod.Duration,
 		acceptableValidityDurations,
 		logger,
+		skipForbiddenDomains,
 	)
 	fmt.Fprintf(os.Stderr, "# Getting certificates issued in the last %s\n", config.CertChecker.CheckPeriod)
 
