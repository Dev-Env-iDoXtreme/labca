diff --git a/wfe2/wfe.go b/wfe2/wfe.go
index 756cef2f2..0e95a1dc2 100644
--- a/wfe2/wfe.go
+++ b/wfe2/wfe.go
@@ -23,6 +23,7 @@ import (
 	"go.opentelemetry.io/otel/trace"
 	"google.golang.org/protobuf/types/known/emptypb"
 
+	"github.com/letsencrypt/boulder/cmd"
 	"github.com/letsencrypt/boulder/core"
 	corepb "github.com/letsencrypt/boulder/core/proto"
 	berrors "github.com/letsencrypt/boulder/errors"
@@ -169,6 +170,8 @@ type WebFrontEndImpl struct {
 	// passed to the newOrder endpoint. If a profile name is not in this list,
 	// the request will be rejected as malformed.
 	certificateProfileNames []string
+
+	hostnamePolicyFile string
 }
 
 // NewWebFrontEndImpl constructs a web service for Boulder
@@ -193,6 +196,7 @@ func NewWebFrontEndImpl(
 	txnBuilder *ratelimits.TransactionBuilder,
 	maxNames int,
 	certificateProfileNames []string,
+	hostnamePolicyFile string,
 ) (WebFrontEndImpl, error) {
 	if len(issuerCertificates) == 0 {
 		return WebFrontEndImpl{}, errors.New("must provide at least one issuer certificate")
@@ -231,6 +235,7 @@ func NewWebFrontEndImpl(
 		txnBuilder:                   txnBuilder,
 		maxNames:                     maxNames,
 		certificateProfileNames:      certificateProfileNames,
+		hostnamePolicyFile:           hostnamePolicyFile,
 	}
 
 	return wfe, nil
@@ -2337,7 +2342,24 @@ func (wfe *WebFrontEndImpl) NewOrder(
 		names[i] = ident.Value
 	}
 
-	err = policy.WellFormedDomainNames(names)
+	logger := cmd.NewLogger(cmd.SyslogConfig{StdoutLevel: 7})
+	pa, err := policy.New(map[core.AcmeChallenge]bool{}, logger)
+	if err != nil {
+		wfe.sendError(response, logEvent, probs.Malformed("cannot create policy authority implementation"), nil)
+		return
+	}
+
+	if wfe.hostnamePolicyFile == "" {
+		wfe.sendError(response, logEvent, probs.Malformed("HostnamePolicyFile must be provided in config"), nil)
+		return
+	}
+	err = pa.LoadHostnamePolicyFile(wfe.hostnamePolicyFile)
+	if err != nil {
+		wfe.sendError(response, logEvent, probs.Malformed("couldn't load hostname policy file"), nil)
+		return
+	}
+
+	err = pa.WellFormedDomainNames(names)
 	if err != nil {
 		wfe.sendError(response, logEvent, web.ProblemDetailsForError(err, "Invalid identifiers requested"), nil)
 		return
