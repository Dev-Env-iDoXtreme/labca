diff --git a/ratelimits/names.go b/ratelimits/names.go
index 0037363b0..c2ddc6076 100644
--- a/ratelimits/names.go
+++ b/ratelimits/names.go
@@ -150,7 +150,11 @@ func validateRegId(id string) error {
 // validateDomain validates that the provided string is formatted 'domain',
 // where domain is a domain name.
 func validateDomain(id string) error {
-	err := policy.ValidDomain(id)
+	pa, err := policy.New(nil, nil)
+	if err != nil {
+		return fmt.Errorf("cannot create policy authority implementation")
+	}
+	err = pa.ValidDomain(id)
 	if err != nil {
 		return fmt.Errorf("invalid domain, %q must be formatted 'domain': %w", id, err)
 	}
@@ -171,7 +175,11 @@ func validateRegIdDomain(id string) error {
 		return fmt.Errorf(
 			"invalid regId, %q must be formatted 'regId:domain'", id)
 	}
-	err = policy.ValidDomain(regIdDomain[1])
+	pa, err := policy.New(nil, nil)
+	if err != nil {
+		return fmt.Errorf("cannot create policy authority implementation")
+	}
+	err = pa.ValidDomain(regIdDomain[1])
 	if err != nil {
 		return fmt.Errorf(
 			"invalid domain, %q must be formatted 'regId:domain': %w", id, err)
@@ -187,8 +195,12 @@ func validateFQDNSet(id string) error {
 		return fmt.Errorf(
 			"invalid fqdnSet, %q must be formatted 'fqdnSet'", id)
 	}
+	pa, err := policy.New(nil, nil)
+	if err != nil {
+		return fmt.Errorf("cannot create policy authority implementation")
+	}
 	for _, domain := range domains {
-		err := policy.ValidDomain(domain)
+		err = pa.ValidDomain(domain)
 		if err != nil {
 			return fmt.Errorf(
 				"invalid domain, %q must be formatted 'fqdnSet': %w", id, err)
