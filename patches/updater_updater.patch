diff --git a/crl/updater/updater.go b/crl/updater/updater.go
index cf58b3e6f..75ee6f338 100644
--- a/crl/updater/updater.go
+++ b/crl/updater/updater.go
@@ -8,6 +8,7 @@ import (
 	"io"
 	"math"
 	"math/big"
+	"os"
 	"sort"
 	"strings"
 	"time"
@@ -128,6 +129,29 @@ func NewUpdater(
 // next scheduled run time based on the current time and the updateOffset, then
 // begins running once every updatePeriod.
 func (cu *crlUpdater) Run(ctx context.Context) error {
+	// If there is no .crl file yet, generate one (after a delay to let all other
+	// components start up fully).
+	// Dirty hack to check filesystem directly instead of using the crl-storer...
+	files, err := os.ReadDir("/opt/wwwstatic/crl/")
+	if err != nil {
+		return err
+	}
+	present := false
+	for _, file := range files {
+		if file.Name() != "root-ca.crl" {
+			present = true
+		}
+	}
+	if !present {
+		select {
+		case <-ctx.Done():
+			return ctx.Err()
+		case <-time.After(2 * time.Minute):
+		}
+
+		cu.Tick(ctx, cu.clk.Now())
+	}
+
 	// We don't want the times at which crlUpdater runs to be dependent on when
 	// the process starts. So wait until the appropriate time before kicking off
 	// the first run and the main ticker loop.
@@ -149,7 +173,7 @@ func (cu *crlUpdater) Run(ctx context.Context) error {
 	// counting from the appropriate time.
 	ticker := time.NewTicker(cu.updatePeriod)
 	atTime := cu.clk.Now()
-	err := cu.Tick(ctx, atTime)
+	err = cu.Tick(ctx, atTime)
 	if err != nil {
 		// We only log, rather than return, so that the long-lived process can
 		// continue and try again at the next tick.
@@ -359,7 +383,7 @@ func (cu *crlUpdater) tickShard(ctx context.Context, atTime time.Time, issuerNam
 			crlEntries = append(crlEntries, entry)
 		}
 
-		cu.log.Infof(
+		cu.log.Debugf(
 			"Queried SA for CRL shard: id=[%s] expiresAfter=[%s] expiresBefore=[%s] numEntries=[%d]",
 			crlID, chunk.start, chunk.end, len(crlEntries))
 	}
